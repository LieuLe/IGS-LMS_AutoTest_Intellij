package pages.content;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;
import java.util.List;
import java.util.Random;


public class Matching2Page {
    private WebDriver driver;
    private Actions actions;
    WebDriverWait wait;
    JavascriptExecutor js;
    private Random random = new Random();
    By drap = By.cssSelector("[id^='drag']");
    By drop = By.cssSelector("[id^='drop']");
    By btn_submit = By.cssSelector("button[class='btn-submit']");
    By btn_yessubmit =  By.xpath("//*[contains(text(), 'YES, SUBMIT NOW')]");

    // Constructor
    public Matching2Page(WebDriver driver) {
        this.driver = driver;
        js = (JavascriptExecutor) driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        this.actions = new Actions(driver);
    }

    public void drap_and_drop() {
        // T√¨m t·∫•t c·∫£ ph·∫ßn t·ª≠ c√≥ id b·∫Øt ƒë·∫ßu v·ªõi "drop"
        List<WebElement> drops = wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(drop));

        // T√¨m t·∫•t c·∫£ ph·∫ßn t·ª≠ c√≥ id b·∫Øt ƒë·∫ßu v·ªõi "drag"
        List<WebElement> drags = wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(drap));

        System.out.println("S·ªë l∆∞·ª£ng drop: " + drops.size());
        System.out.println("S·ªë l∆∞·ª£ng drag: " + drags.size());
        try {
            Thread.sleep(5000);  // D·ª´ng l·∫°i 5 gi√¢y ƒë·ªÉ trang ·ªïn ƒë·ªãnh
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        for (WebElement drop : drops) {
            if (drags.isEmpty()) break; // N·∫øu h·∫øt drag th√¨ d·ª´ng l·∫°i
            int randomIndex = random.nextInt(drags.size()); // Ch·ªçn drag ng·∫´u nhi√™n
            WebElement randomDrag = drags.get(randomIndex);
            actions.clickAndHold(randomDrag)
                    .pause(Duration.ofSeconds(5))
                    .moveToElement(drop)
                    .pause(Duration.ofSeconds(5))
                    .release()
                    .perform();

            System.out.println("ƒê√£ th·∫£ " + randomDrag.getAttribute("id") + " v√†o " + drop.getAttribute("id"));
            drags.remove(randomIndex); // X√≥a drag ƒë√£ s·ª≠ d·ª•ng
            // Ch·ªù v√†i gi√¢y ƒë·ªÉ UI c·∫≠p nh·∫≠t
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        // Ki·ªÉm tra l·∫°i v·ªã tr√≠ sau khi k√©o th·∫£
        verifyElementMoved("parent-drag0");
        verifyElementMoved("parent-drag1");
    }

    // üõ† H√†m ki·ªÉm tra n·∫øu ph·∫ßn t·ª≠ **ƒë√£ r·ªùi kh·ªèi** `box-answer-2`
    public void verifyElementMoved(String parentDragId) {
        try {
            WebElement answerBox = driver.findElement(By.id("box-answer-2"));
            List<WebElement> elementsInside = answerBox.findElements(By.id(parentDragId));

            if (elementsInside.isEmpty()) {
                System.out.println("‚úÖ " + parentDragId + " ƒë√£ di chuy·ªÉn kh·ªèi box-answer-2");
            } else {
                System.out.println("‚ùå " + parentDragId + " v·∫´n c√≤n trong box-answer-2");
            }
        } catch (Exception e) {
            System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠: " + parentDragId);
        }
    }

    public void clickSubmit (){
        if (driver.findElement(btn_submit).isDisplayed()){
            driver.findElement(btn_submit).click();}
        else {
            System.out.println("Click submit is fail");}
    }

    public void clickconfirmsubmit (){
        if (driver.findElement(btn_yessubmit).isDisplayed()){
            driver.findElement(btn_yessubmit).click();}
        else {
            System.out.println("Click confirm is fail");}
    }

}